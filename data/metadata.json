{
    "title": "Starbucks Database (Singapore)",
    "description": "A comprehensive database of Starbucks stores, menu items, and prices in Singapore.",
    "license": "MIT",
    "license_url": "https://github.com/ngshiheng/starbucksdb/blob/main/LICENSE",
    "source": "Starbucks Singapore",
    "source_url": "https://www.starbucks.com.sg/",
    "databases": {
        "starbucks": {
            "queries": {
                "caffe_latte_prices": {
                    "sql": "SELECT s.id AS store_id, s.store_name, s.longitude, s.latitude, m.name AS item_name, p.base_price / 100.0 AS price_sgd FROM stores s JOIN menu_items m ON s.id = m.store_id JOIN item_prices p ON m.id = p.item_id AND s.id = p.store_id WHERE m.name = 'Caffè Latte' AND p.effective_date = (SELECT MAX(effective_date) FROM item_prices WHERE item_id = m.id AND store_id = s.id) ORDER BY price_sgd DESC",
                    "title": "Caffè Latte Prices Across Singapore",
                    "description": "Shows the current price of Caffè Latte at all Starbucks locations in Singapore",
                    "plugins": {
                        "datasette-cluster-map": {
                            "latitude_column": "latitude",
                            "longitude_column": "longitude",
                            "popup_html": "<b>{store_name}</b><br>Caffè Latte Price: S${price_sgd:.2f}"
                        }
                    }
                },
                "largest_price_increases": {
                    "sql": "WITH price_diff AS ( SELECT m.name AS item_name, s.store_name, p2.base_price / 100.0 AS old_price, p1.base_price / 100.0 AS new_price, (p1.base_price - p2.base_price) / 100.0 AS price_difference, p2.effective_date AS old_date, p1.effective_date AS new_date, ROW_NUMBER() OVER ( PARTITION BY m.name ORDER BY (p1.base_price - p2.base_price) DESC ) AS rank FROM item_prices p1 JOIN item_prices p2 ON p1.item_id = p2.item_id AND p1.store_id = p2.store_id JOIN menu_items m ON p1.item_id = m.id JOIN stores s ON p1.store_id = s.id WHERE p1.effective_date > p2.effective_date AND p1.effective_date = ( SELECT MAX(effective_date) FROM item_prices WHERE item_id = p1.item_id AND store_id = p1.store_id ) AND p2.effective_date = ( SELECT MAX(effective_date) FROM item_prices WHERE item_id = p1.item_id AND store_id = p1.store_id AND effective_date < p1.effective_date ) ) SELECT item_name, store_name, old_price AS old_price_sgd, new_price AS new_price_sgd, price_difference AS absolute_price_increase_sgd, old_date AS previous_price_date, new_date AS current_price_date FROM price_diff WHERE rank = 1 ORDER BY absolute_price_increase_sgd DESC LIMIT 20;",
                    "title": "Largest Price Increases",
                    "description": "Reveals the most significant price increases across Starbucks menu items, highlighting which items and stores have seen the largest absolute price hikes. Identifies items with the most substantial price increments by store, showing the magnitude of price changes over time."
                },
                "price_changes_summary": {
                    "sql": "WITH PriceChanges AS (SELECT m.name item_name,ip.base_price new_price,prev.base_price old_price,ip.effective_date,((ip.base_price-prev.base_price)*100.0/prev.base_price) pct_change,COUNT(*)OVER(PARTITION BY m.name,ip.effective_date,ip.base_price,prev.base_price)store_count,GROUP_CONCAT(s.store_name)OVER(PARTITION BY m.name,ip.effective_date,ip.base_price,prev.base_price)affected_stores FROM item_prices ip JOIN menu_items m ON ip.item_id=m.id JOIN stores s ON ip.store_id=s.id LEFT JOIN item_prices prev ON ip.item_id=prev.item_id AND ip.store_id=prev.store_id AND prev.effective_date=(SELECT MAX(effective_date)FROM item_prices p2 WHERE p2.item_id=ip.item_id AND p2.store_id=ip.store_id AND p2.effective_date<ip.effective_date)WHERE ip.effective_date>=date('now','-30 days')AND prev.base_price IS NOT NULL AND ip.base_price!=prev.base_price)SELECT item_name,old_price/100.0 old_price_sgd,new_price/100.0 new_price_sgd,ROUND(pct_change,2)price_change_percentage,effective_date,store_count stores_affected,affected_stores FROM PriceChanges GROUP BY 1,2,3,4,5,6,7 ORDER BY effective_date DESC,pct_change DESC",
                    "title": "Price Changes Summary with Store Details",
                    "description": "Provides a consolidated view of recent price changes across all stores, showing the old and new prices, percentage change, and affected store locations. Groups identical price changes to reduce redundancy while maintaining store-level details."
                },
                "average_price_change_by_store": {
                    "sql": "WITH price_changes AS (SELECT p1.store_id, (p1.base_price - p2.base_price) / 100.0 AS price_difference FROM item_prices p1 JOIN item_prices p2 ON p1.item_id = p2.item_id AND p1.store_id = p2.store_id WHERE p1.effective_date > p2.effective_date AND p1.effective_date = (SELECT MAX(effective_date) FROM item_prices WHERE item_id = p1.item_id AND store_id = p1.store_id) AND p2.effective_date = (SELECT MAX(effective_date) FROM item_prices WHERE item_id = p1.item_id AND store_id = p1.store_id AND effective_date < p1.effective_date)) SELECT s.store_name, AVG(price_difference) AS avg_price_change FROM price_changes pc JOIN stores s ON pc.store_id = s.id GROUP BY s.id ORDER BY avg_price_change DESC",
                    "title": "Average Price Change by Store",
                    "description": "Shows the average price change across all items for each store"
                },
                "price_volatility": {
                    "sql": "WITH price_volatility AS ( SELECT m.name AS item_name, s.store_name, COUNT(*) AS price_change_count, (MAX(base_price) - MIN(base_price)) / 100.0 AS price_range, ROW_NUMBER() OVER ( PARTITION BY m.name ORDER BY COUNT(*) * (MAX(base_price) - MIN(base_price)) DESC ) AS volatility_rank FROM item_prices ip JOIN menu_items m ON ip.item_id = m.id JOIN stores s ON ip.store_id = s.id GROUP BY m.name, s.store_name ) SELECT item_name, store_name, price_change_count, price_range, (price_change_count * price_range) AS volatility_score FROM price_volatility WHERE volatility_rank = 1 ORDER BY volatility_score DESC LIMIT 20;",
                    "title": "Price Volatility",
                    "description": "Identifies items with the most volatile prices based on frequency of changes and price range"
                },
                "amenities_summary": {
                    "sql": "SELECT COUNT(*) AS total_stores, SUM(CASE WHEN json_extract(amenities, '$.24Hours') = true THEN 1 ELSE 0 END) AS stores_24h, SUM(CASE WHEN json_extract(amenities, '$.Cashless') = true THEN 1 ELSE 0 END) AS stores_cashless, SUM(CASE WHEN json_extract(amenities, '$.FreeWifi') = true THEN 1 ELSE 0 END) AS stores_with_wifi, SUM(CASE WHEN json_extract(amenities, '$.MobileOrderandPay') = true THEN 1 ELSE 0 END) AS stores_with_mobile_order, SUM(CASE WHEN json_extract(amenities, '$.NitroColdBrew') = true THEN 1 ELSE 0 END) AS stores_with_nitro, SUM(CASE WHEN json_extract(amenities, '$.StarbucksReserve') = true THEN 1 ELSE 0 END) AS reserve_stores FROM stores",
                    "title": "Amenities Summary",
                    "description": "Provides a summary of how many stores offer each amenity"
                }
            },
            "tables": {
                "stores": {
                    "sortable_columns": [
                        "id",
                        "branch_code",
                        "store_name",
                        "postal_code"
                    ],
                    "facets": [
                        "monp_status",
                        "delivery_status",
                        "open_now"
                    ],
                    "plugins": {
                        "datasette-cluster-map": {
                            "latitude_column": "latitude",
                            "longitude_column": "longitude"
                        }
                    },
                    "description": "Information about Starbucks store locations in Singapore",
                },
                "menu_items": {
                    "sortable_columns": [
                        "id",
                        "store_id",
                        "name",
                        "is_mobile_order_pay",
                        "is_delivery",
                        "is_featured"
                    ],
                    "facets": [
                        "store_id",
                        "is_mobile_order_pay",
                        "is_delivery",
                        "is_featured",
                        "is_scheduled",
                        "is_dine_in"
                    ],
                    "description": "Starbucks menu items available in Singapore stores"
                },
                "item_prices": {
                    "sortable_columns": [
                        "id",
                        "item_id",
                        "store_id",
                        "base_price",
                        "delivery_price",
                        "effective_date"
                    ],
                    "facets": [
                        "store_id",
                        "effective_date"
                    ],
                    "description": "Pricing information for Starbucks menu items in Singapore"
                }
            }
        }
    },
    "about": "Made by jerrynsh.com",
    "about_url": "https://jerrynsh.com/",
    "plugins": {
        "datasette-block-robots": {
            "allow_only_index": true
        }
    }
}
{
    "title": "Starbucks Database (Singapore)",
    "description": "A comprehensive database of Starbucks stores, menu items, and prices in Singapore.",
    "license": "MIT",
    "license_url": "https://github.com/ngshiheng/starbucksdb/blob/main/LICENSE",
    "source": "Starbucks Singapore",
    "source_url": "https://www.starbucks.com.sg/",
    "databases": {
        "starbucks": {
            "queries": {
                "caffe_latte_prices": {
                    "sql": "SELECT s.id AS store_id, s.store_name, s.longitude, s.latitude, m.name AS item_name, p.base_price / 100.0 AS price_sgd FROM stores s JOIN menu_items m ON s.id = m.store_id JOIN item_prices p ON m.id = p.item_id AND s.id = p.store_id WHERE m.name = 'Caffè Latte' AND p.effective_date = (SELECT MAX(effective_date) FROM item_prices WHERE item_id = m.id AND store_id = s.id) ORDER BY s.store_name",
                    "title": "Caffè Latte Prices Across Singapore",
                    "description": "Shows the current price of Caffè Latte at all Starbucks locations in Singapore",
                    "plugins": {
                        "datasette-cluster-map": {
                            "latitude_column": "latitude",
                            "longitude_column": "longitude",
                            "popup_html": "<b>{store_name}</b><br>Caffè Latte Price: S${price_sgd:.2f}"
                        }
                    }
                },
                "recent_price_changes": {
                    "sql": "WITH recent_prices AS (SELECT item_id, store_id, base_price, delivery_price, effective_date, LAG(base_price / 100.0) OVER (PARTITION BY item_id, store_id ORDER BY effective_date) AS previous_base_price, LAG(delivery_price / 100.0)  OVER (PARTITION BY item_id, store_id ORDER BY effective_date) AS previous_delivery_price, LAG(effective_date) OVER (PARTITION BY item_id, store_id ORDER BY effective_date) AS previous_date FROM item_prices WHERE effective_date >= date('now', '-30 days')) SELECT m.name, s.store_name, rp.previous_base_price AS old_base_price, rp.base_price / 100.0 AS new_base_price, rp.previous_delivery_price AS old_delivery_price, rp.delivery_price / 100.0 AS new_delivery_price, rp.previous_date AS old_date, rp.effective_date AS new_date FROM recent_prices rp JOIN menu_items m ON rp.item_id = m.id JOIN stores s ON rp.store_id = s.id WHERE rp.previous_base_price IS NOT NULL ORDER BY rp.effective_date DESC LIMIT 20",
                    "title": "Recent Price Changes",
                    "description": "Shows price changes in the last 30 days across all items and stores, comparing old and new prices"
                },
                "largest_price_increases": {
                    "sql": "WITH price_changes AS (SELECT p1.item_id, m.name, s.store_name, p1.base_price / 100.0 AS new_price, p2.base_price / 100.0 AS old_price, p1.effective_date AS new_date, p2.effective_date AS old_date, (p1.base_price - p2.base_price) / 100.0 AS price_difference FROM item_prices p1 JOIN item_prices p2 ON p1.item_id = p2.item_id AND p1.store_id = p2.store_id JOIN menu_items m ON p1.item_id = m.id JOIN stores s ON p1.store_id = s.id WHERE p1.effective_date > p2.effective_date AND p1.effective_date = (SELECT MAX(effective_date) FROM item_prices WHERE item_id = p1.item_id AND store_id = p1.store_id) AND p2.effective_date = (SELECT MAX(effective_date) FROM item_prices WHERE item_id = p1.item_id AND store_id = p1.store_id AND effective_date < p1.effective_date)) SELECT name, store_name, old_price, new_price, price_difference, old_date, new_date FROM price_changes ORDER BY price_difference DESC LIMIT 20",
                    "title": "Largest Price Increases",
                    "description": "Shows the items with the largest price increases, comparing the most recent price to the previous price"
                },
                "average_price_change_by_store": {
                    "sql": "WITH price_changes AS (SELECT p1.store_id, (p1.base_price - p2.base_price) / 100.0 AS price_difference FROM item_prices p1 JOIN item_prices p2 ON p1.item_id = p2.item_id AND p1.store_id = p2.store_id WHERE p1.effective_date > p2.effective_date AND p1.effective_date = (SELECT MAX(effective_date) FROM item_prices WHERE item_id = p1.item_id AND store_id = p1.store_id) AND p2.effective_date = (SELECT MAX(effective_date) FROM item_prices WHERE item_id = p1.item_id AND store_id = p1.store_id AND effective_date < p1.effective_date)) SELECT s.store_name, AVG(price_difference) AS avg_price_change FROM price_changes pc JOIN stores s ON pc.store_id = s.id GROUP BY s.id ORDER BY avg_price_change DESC",
                    "title": "Average Price Change by Store",
                    "description": "Shows the average price change across all items for each store"
                },
                "price_volatility": {
                    "sql": "WITH price_stats AS (SELECT item_id, store_id, COUNT(*) AS price_change_count, MAX(base_price) - MIN(base_price) AS price_range FROM item_prices GROUP BY item_id, store_id) SELECT m.name, s.store_name, ps.price_change_count, ps.price_range, (ps.price_range * ps.price_change_count) AS volatility_score FROM price_stats ps JOIN menu_items m ON ps.item_id = m.id JOIN stores s ON ps.store_id = s.id ORDER BY volatility_score DESC LIMIT 20",
                    "title": "Price Volatility",
                    "description": "Identifies items with the most volatile prices based on frequency of changes and price range"
                },
                "amenities_summary": {
                    "sql": "SELECT COUNT(*) AS total_stores, SUM(CASE WHEN json_extract(amenities, '$.24Hours') = true THEN 1 ELSE 0 END) AS stores_24h, SUM(CASE WHEN json_extract(amenities, '$.Cashless') = true THEN 1 ELSE 0 END) AS stores_cashless, SUM(CASE WHEN json_extract(amenities, '$.FreeWifi') = true THEN 1 ELSE 0 END) AS stores_with_wifi, SUM(CASE WHEN json_extract(amenities, '$.MobileOrderandPay') = true THEN 1 ELSE 0 END) AS stores_with_mobile_order, SUM(CASE WHEN json_extract(amenities, '$.NitroColdBrew') = true THEN 1 ELSE 0 END) AS stores_with_nitro, SUM(CASE WHEN json_extract(amenities, '$.StarbucksReserve') = true THEN 1 ELSE 0 END) AS reserve_stores FROM stores",
                    "title": "Amenities Summary",
                    "description": "Provides a summary of how many stores offer each amenity"
                }
            },
            "tables": {
                "stores": {
                    "sortable_columns": [
                        "id",
                        "branch_code",
                        "store_name",
                        "postal_code"
                    ],
                    "facets": ["monp_status", "delivery_status", "open_now"],
                    "plugins": {
                        "datasette-cluster-map": {
                            "latitude_column": "latitude",
                            "longitude_column": "longitude"
                        }
                    },
                    "description": "Information about Starbucks store locations in Singapore"
                },
                "menu_items": {
                    "sortable_columns": [
                        "id",
                        "store_id",
                        "name",
                        "is_mobile_order_pay",
                        "is_delivery",
                        "is_featured"
                    ],
                    "facets": [
                        "store_id",
                        "is_mobile_order_pay",
                        "is_delivery",
                        "is_featured",
                        "is_scheduled",
                        "is_dine_in"
                    ],
                    "description": "Starbucks menu items available in Singapore stores"
                },
                "item_prices": {
                    "sortable_columns": [
                        "id",
                        "item_id",
                        "store_id",
                        "base_price",
                        "delivery_price",
                        "effective_date"
                    ],
                    "facets": ["store_id", "effective_date"],
                    "description": "Pricing information for Starbucks menu items in Singapore"
                }
            }
        }
    },
    "about": "Made by jerrynsh.com",
    "about_url": "https://jerrynsh.com/"
}

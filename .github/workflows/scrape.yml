name: Scrape latest data

on:
    push:
        branches:
            - "main"
        paths:
            - "**.py"
            - "poetry.lock"
            - ".github/workflows/**"

    workflow_dispatch:
    schedule:
        - cron: "0 0 * * 0" # Every Sunday at 00:00

env:
    PYTHON_VERSION: "3.11"
    POETRY_VERSION: "1.7"
    POETRY_URL: https://install.python-poetry.org

jobs:
    crawl-and-update:
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v4

            - name: Install poetry & datasette
              run: |
                  pipx install poetry==${{ env.POETRY_VERSION }}
                  pipx install datasette

            - name: Set up python
              uses: actions/setup-python@v5
              with:
                  python-version: ${{ env.PYTHON_VERSION }}
                  cache: poetry
                  cache-dependency-path: poetry.lock

            - name: Set poetry environment
              run: |
                  poetry env use ${{ env.PYTHON_VERSION }}

            - name: Install poetry dependencies
              run: |
                  poetry install --no-root

            - name: Get latest artifact id
              run: |
                  ARTIFACT_RUN_ID=$(curl -s "https://api.github.com/repos/${{ github.repository }}/actions/artifacts?per_page=1" | jq '.artifacts[0].workflow_run.id')
                  echo "artifact_run_id=$ARTIFACT_RUN_ID" >> $GITHUB_ENV

            - name: Download artifact
              uses: actions/download-artifact@v4
              with:
                  name: starbucksdb
                  path: ./data/
                  run-id: ${{ env.artifact_run_id }}
                  github-token: ${{ secrets.GH_PAT  }}
              continue-on-error: false

            - name: Display downloaded file
              run: ls data/

            - name: Get current date
              run: echo "today=$(date --rfc-3339=date)" >> $GITHUB_ENV

            - name: Restore scrapy cache
              id: scrapy-cache-restore
              uses: actions/cache/restore@v4
              with:
                  path: |
                      .scrapy
                  key: ${{ runner.os }}-pypoetry-${{ hashFiles('**/poetry.lock') }}-${{ env.today  }}

            - name: Run scrapy crawl
              run: poetry run scrapy crawl singapore

            - name: Save scrapy cache
              id: cache-primes-save
              uses: actions/cache/save@v4
              with:
                  path: |
                      .scrapy
                  key: ${{ steps.scrapy-cache-restore.outputs.cache-primary-key }}

            - name: Upload updated artifact
              uses: actions/upload-artifact@v4
              with:
                  name: starbucksdb
                  path: ./data/starbucks.db
                  if-no-files-found: error

            - name: Login to Docker Hub
              uses: docker/login-action@v3
              with:
                  username: ngshiheng
                  password: ${{ secrets.DOCKERHUB_TOKEN }}

            - name: Build Docker image
              run: make docker-build

            - name: Push Docker image
              run: make docker-push

    deploy:
        needs: scrape-and-build
        runs-on: ubuntu-latest
        steps:
            - name: Check out this repo
              uses: actions/checkout@v4

            - name: Get Latest Deployment ID
              id: get-deployment
              run: |
                  echo "Fetching latest deployment ID..."
                  RESPONSE=$(curl --fail-with-body -s -X POST \
                    -H "Content-Type: application/json" \
                    -H "Authorization: Bearer ${{ secrets.RAILWAY_TOKEN }}" \
                    -H "User-Agent: GitHub-Actions" \
                    --url https://backboard.railway.app/graphql/v2 \
                    -d '{
                      "query": "query deployments { deployments(last: 1, input: { projectId: \"${{ secrets.RAILWAY_PROJECT_ID }}\", environmentId: \"${{ secrets.RAILWAY_ENVIRONMENT_ID }}\", serviceId: \"${{ secrets.RAILWAY_SERVICE_ID }}\", status: { in: [SUCCESS] } }) { edges { node { id status } } } }",
                      "operationName": "deployments"
                    }')

                  echo "API Response:"
                  echo "$RESPONSE"

                  if echo "$RESPONSE" | jq -e '.errors'; then
                    echo "Error in API response"
                    exit 1
                  fi

                  DEPLOYMENT_ID=$(echo "$RESPONSE" | jq -r '.data.deployments.edges[0].node.id')
                  echo "Found deployment ID: $DEPLOYMENT_ID"
                  echo "deployment_id=$DEPLOYMENT_ID" >> $GITHUB_OUTPUT

            - name: Trigger Redeployment
              run: |
                  echo "Triggering redeployment for ID: ${{ steps.get-deployment.outputs.deployment_id }}"
                  RESPONSE=$(curl --fail-with-body -s -X POST \
                    -H "Content-Type: application/json" \
                    -H "Authorization: Bearer ${{ secrets.RAILWAY_TOKEN }}" \
                    -H "User-Agent: GitHub-Actions" \
                    --url https://backboard.railway.app/graphql/v2 \
                    -d "{
                      \"query\": \"mutation { deploymentRedeploy(id: \\\"${{ steps.get-deployment.outputs.deployment_id }}\\\", usePreviousImageTag: true) { id status } }\"
                    }")

                  echo "API Response:"
                  echo "$RESPONSE"

                  if echo "$RESPONSE" | jq -e '.errors'; then
                    echo "Error in API response"
                    exit 1
                  fi

                  echo "Successfully triggered redeployment with ID: $REDEPLOY_ID"
